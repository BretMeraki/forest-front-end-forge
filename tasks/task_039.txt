# Task ID: 39
# Title: Implement RoadmapManifest Helper Methods for API Ergonomics
# Status: pending
# Dependencies: None
# Priority: high
# Description: Enhance RoadmapManifest model with helper methods for improved API ergonomics including get_step_by_id, update_step_status, add_step, and get_pending_actionable_steps
# Details:
As specified in PRD v3.16 section 3.2.1 under "MVP Polish - Dev/UX: (Manifest API Ergonomics)", implement the following helper methods for the RoadmapManifest Pydantic model in forest_app/core/roadmap_models.py:\n\n1. Basic helper methods:\n```python\ndef get_step_by_id(self, step_id: UUID) -> Optional[RoadmapStep]:\n    \"\"\"Find and return a step by its ID, or None if not found.\"\"\"\n    for step in self.steps:\n        if step.id == step_id:\n            return step\n    return None\n\ndef update_step_status(self, step_id: UUID, new_status: str) -> bool:\n    \"\"\"Update a step's status and update timestamps. Returns True if successful.\"\"\"\n    step = self.get_step_by_id(step_id)\n    if step:\n        step.status = new_status\n        step.updated_at = datetime.now(timezone.utc)\n        self.updated_at = datetime.now(timezone.utc)\n        return True\n    return False\n\ndef add_step(self, step: RoadmapStep) -> None:\n    \"\"\"Add a new step to the manifest and update timestamp.\"\"\"\n    self.steps.append(step)\n    self.updated_at = datetime.now(timezone.utc)\n```\n\n2. Advanced helper methods for MVP:\n```python\ndef get_pending_actionable_steps(self) -> List[RoadmapStep]:\n    \"\"\"Returns steps that are 'pending', with all dependencies met, sorted by priority.\"\"\"\n    # Get all completed step IDs\n    completed_step_ids = {step.id for step in self.steps if step.status == \"completed\"}\n    \n    # Filter for pending steps with all dependencies met\n    actionable_steps = []\n    for step in self.steps:\n        if step.status != \"pending\":\n            continue\n            \n        # Check if all dependencies are satisfied\n        dependencies_met = all(dep_id in completed_step_ids for dep_id in step.dependencies)\n        if dependencies_met:\n            actionable_steps.append(step)\n    \n    # Sort by priority (high, medium, low)\n    priority_order = {\"high\": 0, \"medium\": 1, \"low\": 2}\n    return sorted(actionable_steps, key=lambda s: priority_order.get(s.priority, 3))\n\ndef get_major_phases(self) -> List[RoadmapStep]:\n    \"\"\"Returns all steps marked as major phases.\"\"\"\n    return [step for step in self.steps \n            if step.hta_metadata.get(\"is_major_phase\", False)]  \n```\n\n3. Create comprehensive unit tests:\n   - Test all helper methods with various scenarios\n   - Verify correct updating of timestamps\n   - Test edge cases like non-existent step IDs\n   - Verify priority sorting in get_pending_actionable_steps\n   - Test with circular dependencies\n\n4. Document the API ergonomics improvements:\n   - Add clear docstrings to all methods\n   - Update API documentation to highlight these convenience methods\n   - Create usage examples for other developers\n\nThese helper methods will improve API ergonomics and make it easier for other parts of the system to work with the RoadmapManifest model, reducing code duplication and improving readability.\n

# Test Strategy:

